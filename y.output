Terminals unused in grammar

   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   FUNCTION_CALL
   ARRAY_ACCESS
   COMMA


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | REAL

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   12                        | %empty

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   14 $@2: %empty

   15 subprogram_head: FUNCTION ID $@2 function_arguments ':' standard_type ';'

   16 $@3: %empty

   17 subprogram_head: PROCEDURE ID $@3 procedure_arguments ';'

   18 function_arguments: '(' parameter_list ')'

   19 procedure_arguments: '(' parameter_list ')'
   20                    | %empty

   21 parameter_list: identifier_list ':' type
   22               | parameter_list ';' identifier_list ':' type
   23               | %empty

   24 compound_statement: BBEGIN optional_statements END

   25 optional_statements: statement_list
   26                    | %empty

   27 statement_list: statement
   28               | statement_list ';' statement

   29 statement: variable ASSIGNOP expression
   30          | procedure_statement
   31          | compound_statement
   32          | IF expression THEN statement ELSE statement
   33          | WHILE expression DO statement

   34 variable: ID
   35         | ID '[' expression ']'

   36 procedure_statement: ID
   37                    | ID '(' expression_list ')'

   38 expression_list: expression
   39                | expression_list ',' expression

   40 expression: simple_expression
   41           | simple_expression RELOP simple_expression

   42 simple_expression: term
   43                  | simple_expression ADDOP term

   44 term: factor
   45     | term MULOP factor

   46 factor: ID
   47       | ID '[' expression ']'
   48       | ID '(' expression_list ')'
   49       | INUM
   50       | RNUM
   51       | '(' expression ')'
   52       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 18 19 37 48 51
')' (41) 2 18 19 37 48 51
',' (44) 4 39
'.' (46) 2
':' (58) 5 15 21 22
';' (59) 2 5 11 15 17 22 28
'[' (91) 8 35 47
']' (93) 8 35 47
error (256)
INUM (258) 8 49
RNUM (259) 50
ID (260) 2 3 4 15 17 34 35 36 37 46 47 48
ASSIGNOP (261) 29
RELOP (262) 41
ADDOP (263) 43
MULOP (264) 45
NOT (265) 52
LT (266)
LE (267)
GT (268)
GE (269)
EQ (270)
NE (271)
OR (272)
PLUS (273)
MINUS (274)
AND (275)
STAR (276)
SLASH (277)
PROGRAM (278) 2
VAR (279) 5
ARRAY (280) 8
OF (281) 8
DOTDOT (282) 8
INTEGER (283) 9
REAL (284) 10
FUNCTION (285) 15
PROCEDURE (286) 17
BBEGIN (287) 24
END (288) 24
IF (289) 32
THEN (290) 32
ELSE (291) 32
WHILE (292) 33
DO (293) 33
FUNCTION_CALL (294)
ARRAY_ACCESS (295)
COMMA (296)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 2, on right: 0
$@1 (52)
    on left: 1, on right: 2
identifier_list (53)
    on left: 3 4, on right: 2 4 5 21 22
declarations (54)
    on left: 5 6, on right: 2 5 13
type (55)
    on left: 7 8, on right: 5 21 22
standard_type (56)
    on left: 9 10, on right: 7 8 15
subprogram_declarations (57)
    on left: 11 12, on right: 2 11 13
subprogram_declaration (58)
    on left: 13, on right: 11
subprogram_head (59)
    on left: 15 17, on right: 13
$@2 (60)
    on left: 14, on right: 15
$@3 (61)
    on left: 16, on right: 17
function_arguments (62)
    on left: 18, on right: 15
procedure_arguments (63)
    on left: 19 20, on right: 17
parameter_list (64)
    on left: 21 22 23, on right: 18 19 22
compound_statement (65)
    on left: 24, on right: 2 13 31
optional_statements (66)
    on left: 25 26, on right: 24
statement_list (67)
    on left: 27 28, on right: 25 28
statement (68)
    on left: 29 30 31 32 33, on right: 27 28 32 33
variable (69)
    on left: 34 35, on right: 29
procedure_statement (70)
    on left: 36 37, on right: 30
expression_list (71)
    on left: 38 39, on right: 37 39 48
expression (72)
    on left: 40 41, on right: 29 32 33 35 38 39 47 51
simple_expression (73)
    on left: 42 43, on right: 40 41 43
term (74)
    on left: 44 45, on right: 42 43 45
factor (75)
    on left: 46 47 48 49 50 51 52, on right: 44 45 52


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 8

    2 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    2 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 13

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


State 15

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 22


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 23


State 17

   15 subprogram_head: FUNCTION . ID $@2 function_arguments ':' standard_type ';'

    ID  shift, and go to state 24


State 18

   17 subprogram_head: PROCEDURE . ID $@3 procedure_arguments ';'

    ID  shift, and go to state 25


State 19

   24 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    $default  reduce using rule 26 (optional_statements)

    compound_statement   go to state 29
    optional_statements  go to state 30
    statement_list       go to state 31
    statement            go to state 32
    variable             go to state 33
    procedure_statement  go to state 34


State 20

   11 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 35


State 21

   13 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 36


State 22

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 37


State 23

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 24

   15 subprogram_head: FUNCTION ID . $@2 function_arguments ':' standard_type ';'

    $default  reduce using rule 14 ($@2)

    $@2  go to state 43


State 25

   17 subprogram_head: PROCEDURE ID . $@3 procedure_arguments ';'

    $default  reduce using rule 16 ($@3)

    $@3  go to state 44


State 26

   34 variable: ID .
   35         | ID . '[' expression ']'
   36 procedure_statement: ID .
   37                    | ID . '(' expression_list ')'

    '('  shift, and go to state 45
    '['  shift, and go to state 46

    ASSIGNOP  reduce using rule 34 (variable)
    $default  reduce using rule 36 (procedure_statement)


State 27

   32 statement: IF . expression THEN statement ELSE statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 52
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 28

   33 statement: WHILE . expression DO statement

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 56
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 29

   31 statement: compound_statement .

    $default  reduce using rule 31 (statement)


State 30

   24 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 57


State 31

   25 optional_statements: statement_list .
   28 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 58

    $default  reduce using rule 25 (optional_statements)


State 32

   27 statement_list: statement .

    $default  reduce using rule 27 (statement_list)


State 33

   29 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 59


State 34

   30 statement: procedure_statement .

    $default  reduce using rule 30 (statement)


State 35

   11 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 11 (subprogram_declarations)


State 36

    5 declarations: declarations . VAR identifier_list ':' type ';'
   13 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 12 (subprogram_declarations)

    subprogram_declarations  go to state 60


State 37

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 38

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 61


State 39

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 40

   10 standard_type: REAL .

    $default  reduce using rule 10 (standard_type)


State 41

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 62


State 42

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 43

   15 subprogram_head: FUNCTION ID $@2 . function_arguments ':' standard_type ';'

    '('  shift, and go to state 63

    function_arguments  go to state 64


State 44

   17 subprogram_head: PROCEDURE ID $@3 . procedure_arguments ';'

    '('  shift, and go to state 65

    $default  reduce using rule 20 (procedure_arguments)

    procedure_arguments  go to state 66


State 45

   37 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 67
    expression         go to state 68
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 46

   35 variable: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 69
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 47

   49 factor: INUM .

    $default  reduce using rule 49 (factor)


State 48

   50 factor: RNUM .

    $default  reduce using rule 50 (factor)


State 49

   46 factor: ID .
   47       | ID . '[' expression ']'
   48       | ID . '(' expression_list ')'

    '('  shift, and go to state 70
    '['  shift, and go to state 71

    $default  reduce using rule 46 (factor)


State 50

   52 factor: NOT . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 72


State 51

   51 factor: '(' . expression ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 73
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 52

   32 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 74


State 53

   40 expression: simple_expression .
   41           | simple_expression . RELOP simple_expression
   43 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 75
    ADDOP  shift, and go to state 76

    $default  reduce using rule 40 (expression)


State 54

   42 simple_expression: term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 77

    $default  reduce using rule 42 (simple_expression)


State 55

   44 term: factor .

    $default  reduce using rule 44 (term)


State 56

   33 statement: WHILE expression . DO statement

    DO  shift, and go to state 78


State 57

   24 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 24 (compound_statement)


State 58

   28 statement_list: statement_list ';' . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 79
    variable             go to state 33
    procedure_statement  go to state 34


State 59

   29 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 80
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 60

   11 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   13 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    compound_statement      go to state 81


State 61

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 82


State 62

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 63

   18 function_arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    $default  reduce using rule 23 (parameter_list)

    identifier_list  go to state 83
    parameter_list   go to state 84


State 64

   15 subprogram_head: FUNCTION ID $@2 function_arguments . ':' standard_type ';'

    ':'  shift, and go to state 85


State 65

   19 procedure_arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    $default  reduce using rule 23 (parameter_list)

    identifier_list  go to state 83
    parameter_list   go to state 86


State 66

   17 subprogram_head: PROCEDURE ID $@3 procedure_arguments . ';'

    ';'  shift, and go to state 87


State 67

   37 procedure_statement: ID '(' expression_list . ')'
   39 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 88
    ','  shift, and go to state 89


State 68

   38 expression_list: expression .

    $default  reduce using rule 38 (expression_list)


State 69

   35 variable: ID '[' expression . ']'

    ']'  shift, and go to state 90


State 70

   48 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression_list    go to state 91
    expression         go to state 68
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 71

   47 factor: ID '[' . expression ']'

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 92
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 72

   52 factor: NOT factor .

    $default  reduce using rule 52 (factor)


State 73

   51 factor: '(' expression . ')'

    ')'  shift, and go to state 93


State 74

   32 statement: IF expression THEN . statement ELSE statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 94
    variable             go to state 33
    procedure_statement  go to state 34


State 75

   41 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    simple_expression  go to state 95
    term               go to state 54
    factor             go to state 55


State 76

   43 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    term    go to state 96
    factor  go to state 55


State 77

   45 term: term MULOP . factor

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    factor  go to state 97


State 78

   33 statement: WHILE expression DO . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 98
    variable             go to state 33
    procedure_statement  go to state 34


State 79

   28 statement_list: statement_list ';' statement .

    $default  reduce using rule 28 (statement_list)


State 80

   29 statement: variable ASSIGNOP expression .

    $default  reduce using rule 29 (statement)


State 81

   13 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 13 (subprogram_declaration)


State 82

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 99


State 83

    4 identifier_list: identifier_list . ',' ID
   21 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 100


State 84

   18 function_arguments: '(' parameter_list . ')'
   22 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 101
    ';'  shift, and go to state 102


State 85

   15 subprogram_head: FUNCTION ID $@2 function_arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 103


State 86

   19 procedure_arguments: '(' parameter_list . ')'
   22 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 104
    ';'  shift, and go to state 102


State 87

   17 subprogram_head: PROCEDURE ID $@3 procedure_arguments ';' .

    $default  reduce using rule 17 (subprogram_head)


State 88

   37 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 37 (procedure_statement)


State 89

   39 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    ID    shift, and go to state 49
    NOT   shift, and go to state 50
    '('   shift, and go to state 51

    expression         go to state 105
    simple_expression  go to state 53
    term               go to state 54
    factor             go to state 55


State 90

   35 variable: ID '[' expression ']' .

    $default  reduce using rule 35 (variable)


State 91

   39 expression_list: expression_list . ',' expression
   48 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 106
    ','  shift, and go to state 89


State 92

   47 factor: ID '[' expression . ']'

    ']'  shift, and go to state 107


State 93

   51 factor: '(' expression ')' .

    $default  reduce using rule 51 (factor)


State 94

   32 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 108


State 95

   41 expression: simple_expression RELOP simple_expression .
   43 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 76

    $default  reduce using rule 41 (expression)


State 96

   43 simple_expression: simple_expression ADDOP term .
   45 term: term . MULOP factor

    MULOP  shift, and go to state 77

    $default  reduce using rule 43 (simple_expression)


State 97

   45 term: term MULOP factor .

    $default  reduce using rule 45 (term)


State 98

   33 statement: WHILE expression DO statement .

    $default  reduce using rule 33 (statement)


State 99

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 109


State 100

   21 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 110
    standard_type  go to state 42


State 101

   18 function_arguments: '(' parameter_list ')' .

    $default  reduce using rule 18 (function_arguments)


State 102

   22 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 111


State 103

   15 subprogram_head: FUNCTION ID $@2 function_arguments ':' standard_type . ';'

    ';'  shift, and go to state 112


State 104

   19 procedure_arguments: '(' parameter_list ')' .

    $default  reduce using rule 19 (procedure_arguments)


State 105

   39 expression_list: expression_list ',' expression .

    $default  reduce using rule 39 (expression_list)


State 106

   48 factor: ID '(' expression_list ')' .

    $default  reduce using rule 48 (factor)


State 107

   47 factor: ID '[' expression ']' .

    $default  reduce using rule 47 (factor)


State 108

   32 statement: IF expression THEN statement ELSE . statement

    ID      shift, and go to state 26
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 27
    WHILE   shift, and go to state 28

    compound_statement   go to state 29
    statement            go to state 113
    variable             go to state 33
    procedure_statement  go to state 34


State 109

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 114


State 110

   21 parameter_list: identifier_list ':' type .

    $default  reduce using rule 21 (parameter_list)


State 111

    4 identifier_list: identifier_list . ',' ID
   22 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 115


State 112

   15 subprogram_head: FUNCTION ID $@2 function_arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


State 113

   32 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 32 (statement)


State 114

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 116


State 115

   22 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 117
    standard_type  go to state 42


State 116

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 118


State 117

   22 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 22 (parameter_list)


State 118

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
