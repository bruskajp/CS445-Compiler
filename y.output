Terminals unused in grammar

   LOOP
   LT
   LE
   GT
   GE
   EQ
   NE
   OR
   PLUS
   MINUS
   AND
   STAR
   SLASH
   THENELSE
   LINKFOR
   FUNCTION_CALL
   ARRAY_ACCESS
   LINK


State 101 conflicts: 1 shift/reduce
State 105 conflicts: 1 shift/reduce
State 125 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    3 identifier_list: ID
    4                | identifier_list ',' ID

    5 declarations: declarations VAR identifier_list ':' type ';'
    6             | %empty

    7 type: standard_type
    8     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    9 standard_type: INTEGER
   10              | BOOLEAN
   11              | REAL

   12 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   13                        | %empty

   14 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement

   15 subprogram_head: scoped_name function_arguments ':' standard_type ';'
   16                | scoped_name procedure_arguments ';'

   17 scoped_name: FUNCTION ID
   18            | PROCEDURE ID

   19 function_arguments: '(' parameter_list ')'

   20 procedure_arguments: '(' parameter_list ')'
   21                    | %empty

   22 parameter_list: identifier_list ':' type
   23               | parameter_list ';' identifier_list ':' type
   24               | %empty

   25 compound_statement: BBEGIN optional_statements END

   26 optional_statements: statement_list
   27                    | %empty

   28 statement_list: statement
   29               | statement_list ';' statement

   30 statement: IF expression THEN statement
   31          | IF expression THEN statement ELSE statement ';'
   32          | variable ASSIGNOP expression
   33          | procedure_statement
   34          | compound_statement
   35          | WHILE expression DO statement_list
   36          | FOR variable ASSIGNOP expression TO expression DO statement_list

   37 variable: ID
   38         | ID '[' expression ']'

   39 procedure_statement: ID
   40                    | ID '(' expression_list ')'

   41 expression_list: expression
   42                | expression_list ',' expression

   43 expression: simple_expression
   44           | simple_expression RELOP simple_expression

   45 simple_expression: term
   46                  | simple_expression ADDOP term

   47 term: factor
   48     | term MULOP factor

   49 factor: ID
   50       | ID '[' expression ']'
   51       | ID '(' expression_list ')'
   52       | INUM
   53       | RNUM
   54       | BOOL
   55       | '(' expression ')'
   56       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 2 19 20 40 51 55
')' (41) 2 19 20 40 51 55
',' (44) 4 42
'.' (46) 2
':' (58) 5 15 22 23
';' (59) 2 5 12 15 16 23 29 31
'[' (91) 8 38 50
']' (93) 8 38 50
error (256)
INUM (258) 8 52
BOOL (259) 54
RNUM (260) 53
ID (261) 2 3 4 17 18 37 38 39 40 49 50 51
ASSIGNOP (262) 32 36
RELOP (263) 44
ADDOP (264) 46
MULOP (265) 48
LOOP (266)
NOT (267) 56
LT (268)
LE (269)
GT (270)
GE (271)
EQ (272)
NE (273)
OR (274)
PLUS (275)
MINUS (276)
AND (277)
STAR (278)
SLASH (279)
PROGRAM (280) 2
VAR (281) 5
ARRAY (282) 8
OF (283) 8
DOTDOT (284) 8
INTEGER (285) 9
REAL (286) 11
BOOLEAN (287) 10
FUNCTION (288) 17
PROCEDURE (289) 18
BBEGIN (290) 25
END (291) 25
IF (292) 30 31
THEN (293) 30 31
ELSE (294) 31
THENELSE (295)
WHILE (296) 35
DO (297) 35 36
FOR (298) 36
TO (299) 36
LINKFOR (300)
FUNCTION_CALL (301)
ARRAY_ACCESS (302)
LINK (303)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 2, on right: 0
$@1 (59)
    on left: 1, on right: 2
identifier_list (60)
    on left: 3 4, on right: 2 4 5 22 23
declarations (61)
    on left: 5 6, on right: 2 5 14
type (62)
    on left: 7 8, on right: 5 22 23
standard_type (63)
    on left: 9 10 11, on right: 7 8 15
subprogram_declarations (64)
    on left: 12 13, on right: 2 12 14
subprogram_declaration (65)
    on left: 14, on right: 12
subprogram_head (66)
    on left: 15 16, on right: 14
scoped_name (67)
    on left: 17 18, on right: 15 16
function_arguments (68)
    on left: 19, on right: 15
procedure_arguments (69)
    on left: 20 21, on right: 16
parameter_list (70)
    on left: 22 23 24, on right: 19 20 23
compound_statement (71)
    on left: 25, on right: 2 14 34
optional_statements (72)
    on left: 26 27, on right: 25
statement_list (73)
    on left: 28 29, on right: 26 29 35 36
statement (74)
    on left: 30 31 32 33 34 35 36, on right: 28 29 30 31
variable (75)
    on left: 37 38, on right: 32 36
procedure_statement (76)
    on left: 39 40, on right: 33
expression_list (77)
    on left: 41 42, on right: 40 42 51
expression (78)
    on left: 43 44, on right: 30 31 32 35 36 38 41 42 50 55
simple_expression (79)
    on left: 45 46, on right: 43 44 46
term (80)
    on left: 47 48, on right: 45 46 48
factor (81)
    on left: 49 50 51 52 53 54 55 56, on right: 47 48 56


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    2 program: $@1 . PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    PROGRAM  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    2 program: $@1 PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 5


State 5

    2 program: $@1 PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 6


State 6

    2 program: $@1 PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 7

    identifier_list  go to state 8


State 7

    3 identifier_list: ID .

    $default  reduce using rule 3 (identifier_list)


State 8

    2 program: $@1 PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    4 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 9
    ','  shift, and go to state 10


State 9

    2 program: $@1 PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 11


State 10

    4 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 12


State 11

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 6 (declarations)

    declarations  go to state 13


State 12

    4 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 4 (identifier_list)


State 13

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    5 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 14

    $default  reduce using rule 13 (subprogram_declarations)

    subprogram_declarations  go to state 15


State 14

    5 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 7

    identifier_list  go to state 16


State 15

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   12 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    scoped_name             go to state 22
    compound_statement      go to state 23


State 16

    4 identifier_list: identifier_list . ',' ID
    5 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 10
    ':'  shift, and go to state 24


State 17

   17 scoped_name: FUNCTION . ID

    ID  shift, and go to state 25


State 18

   18 scoped_name: PROCEDURE . ID

    ID  shift, and go to state 26


State 19

   25 compound_statement: BBEGIN . optional_statements END

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    $default  reduce using rule 27 (optional_statements)

    compound_statement   go to state 31
    optional_statements  go to state 32
    statement_list       go to state 33
    statement            go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 20

   12 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 37


State 21

   14 subprogram_declaration: subprogram_head . declarations subprogram_declarations compound_statement

    $default  reduce using rule 6 (declarations)

    declarations  go to state 38


State 22

   15 subprogram_head: scoped_name . function_arguments ':' standard_type ';'
   16                | scoped_name . procedure_arguments ';'

    '('  shift, and go to state 39

    $default  reduce using rule 21 (procedure_arguments)

    function_arguments   go to state 40
    procedure_arguments  go to state 41


State 23

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 42


State 24

    5 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 43
    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    type           go to state 47
    standard_type  go to state 48


State 25

   17 scoped_name: FUNCTION ID .

    $default  reduce using rule 17 (scoped_name)


State 26

   18 scoped_name: PROCEDURE ID .

    $default  reduce using rule 18 (scoped_name)


State 27

   37 variable: ID .
   38         | ID . '[' expression ']'
   39 procedure_statement: ID .
   40                    | ID . '(' expression_list ')'

    '('  shift, and go to state 49
    '['  shift, and go to state 50

    ASSIGNOP  reduce using rule 37 (variable)
    $default  reduce using rule 39 (procedure_statement)


State 28

   30 statement: IF . expression THEN statement
   31          | IF . expression THEN statement ELSE statement ';'

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 57
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 29

   35 statement: WHILE . expression DO statement_list

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 61
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 30

   36 statement: FOR . variable ASSIGNOP expression TO expression DO statement_list

    ID  shift, and go to state 62

    variable  go to state 63


State 31

   34 statement: compound_statement .

    $default  reduce using rule 34 (statement)


State 32

   25 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 64


State 33

   26 optional_statements: statement_list .
   29 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 65

    $default  reduce using rule 26 (optional_statements)


State 34

   28 statement_list: statement .

    $default  reduce using rule 28 (statement_list)


State 35

   32 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 66


State 36

   33 statement: procedure_statement .

    $default  reduce using rule 33 (statement)


State 37

   12 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 12 (subprogram_declarations)


State 38

    5 declarations: declarations . VAR identifier_list ':' type ';'
   14 subprogram_declaration: subprogram_head declarations . subprogram_declarations compound_statement

    VAR  shift, and go to state 14

    $default  reduce using rule 13 (subprogram_declarations)

    subprogram_declarations  go to state 67


State 39

   19 function_arguments: '(' . parameter_list ')'
   20 procedure_arguments: '(' . parameter_list ')'

    ID  shift, and go to state 7

    $default  reduce using rule 24 (parameter_list)

    identifier_list  go to state 68
    parameter_list   go to state 69


State 40

   15 subprogram_head: scoped_name function_arguments . ':' standard_type ';'

    ':'  shift, and go to state 70


State 41

   16 subprogram_head: scoped_name procedure_arguments . ';'

    ';'  shift, and go to state 71


State 42

    2 program: $@1 PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 2 (program)


State 43

    8 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 72


State 44

    9 standard_type: INTEGER .

    $default  reduce using rule 9 (standard_type)


State 45

   11 standard_type: REAL .

    $default  reduce using rule 11 (standard_type)


State 46

   10 standard_type: BOOLEAN .

    $default  reduce using rule 10 (standard_type)


State 47

    5 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 73


State 48

    7 type: standard_type .

    $default  reduce using rule 7 (type)


State 49

   40 procedure_statement: ID '(' . expression_list ')'

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression_list    go to state 74
    expression         go to state 75
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 50

   38 variable: ID '[' . expression ']'

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 76
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 51

   52 factor: INUM .

    $default  reduce using rule 52 (factor)


State 52

   54 factor: BOOL .

    $default  reduce using rule 54 (factor)


State 53

   53 factor: RNUM .

    $default  reduce using rule 53 (factor)


State 54

   49 factor: ID .
   50       | ID . '[' expression ']'
   51       | ID . '(' expression_list ')'

    '('  shift, and go to state 77
    '['  shift, and go to state 78

    $default  reduce using rule 49 (factor)


State 55

   56 factor: NOT . factor

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    factor  go to state 79


State 56

   55 factor: '(' . expression ')'

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 80
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 57

   30 statement: IF expression . THEN statement
   31          | IF expression . THEN statement ELSE statement ';'

    THEN  shift, and go to state 81


State 58

   43 expression: simple_expression .
   44           | simple_expression . RELOP simple_expression
   46 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 82
    ADDOP  shift, and go to state 83

    $default  reduce using rule 43 (expression)


State 59

   45 simple_expression: term .
   48 term: term . MULOP factor

    MULOP  shift, and go to state 84

    $default  reduce using rule 45 (simple_expression)


State 60

   47 term: factor .

    $default  reduce using rule 47 (term)


State 61

   35 statement: WHILE expression . DO statement_list

    DO  shift, and go to state 85


State 62

   37 variable: ID .
   38         | ID . '[' expression ']'

    '['  shift, and go to state 50

    $default  reduce using rule 37 (variable)


State 63

   36 statement: FOR variable . ASSIGNOP expression TO expression DO statement_list

    ASSIGNOP  shift, and go to state 86


State 64

   25 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 25 (compound_statement)


State 65

   29 statement_list: statement_list ';' . statement

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 87
    variable             go to state 35
    procedure_statement  go to state 36


State 66

   32 statement: variable ASSIGNOP . expression

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 88
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 67

   12 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'
   14 subprogram_declaration: subprogram_head declarations subprogram_declarations . compound_statement

    FUNCTION   shift, and go to state 17
    PROCEDURE  shift, and go to state 18
    BBEGIN     shift, and go to state 19

    subprogram_declaration  go to state 20
    subprogram_head         go to state 21
    scoped_name             go to state 22
    compound_statement      go to state 89


State 68

    4 identifier_list: identifier_list . ',' ID
   22 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 90


State 69

   19 function_arguments: '(' parameter_list . ')'
   20 procedure_arguments: '(' parameter_list . ')'
   23 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 91
    ';'  shift, and go to state 92


State 70

   15 subprogram_head: scoped_name function_arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    standard_type  go to state 93


State 71

   16 subprogram_head: scoped_name procedure_arguments ';' .

    $default  reduce using rule 16 (subprogram_head)


State 72

    8 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 94


State 73

    5 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 5 (declarations)


State 74

   40 procedure_statement: ID '(' expression_list . ')'
   42 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 95
    ','  shift, and go to state 96


State 75

   41 expression_list: expression .

    $default  reduce using rule 41 (expression_list)


State 76

   38 variable: ID '[' expression . ']'

    ']'  shift, and go to state 97


State 77

   51 factor: ID '(' . expression_list ')'

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression_list    go to state 98
    expression         go to state 75
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 78

   50 factor: ID '[' . expression ']'

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 99
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 79

   56 factor: NOT factor .

    $default  reduce using rule 56 (factor)


State 80

   55 factor: '(' expression . ')'

    ')'  shift, and go to state 100


State 81

   30 statement: IF expression THEN . statement
   31          | IF expression THEN . statement ELSE statement ';'

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 101
    variable             go to state 35
    procedure_statement  go to state 36


State 82

   44 expression: simple_expression RELOP . simple_expression

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    simple_expression  go to state 102
    term               go to state 59
    factor             go to state 60


State 83

   46 simple_expression: simple_expression ADDOP . term

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    term    go to state 103
    factor  go to state 60


State 84

   48 term: term MULOP . factor

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    factor  go to state 104


State 85

   35 statement: WHILE expression DO . statement_list

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement_list       go to state 105
    statement            go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 86

   36 statement: FOR variable ASSIGNOP . expression TO expression DO statement_list

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 106
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 87

   29 statement_list: statement_list ';' statement .

    $default  reduce using rule 29 (statement_list)


State 88

   32 statement: variable ASSIGNOP expression .

    $default  reduce using rule 32 (statement)


State 89

   14 subprogram_declaration: subprogram_head declarations subprogram_declarations compound_statement .

    $default  reduce using rule 14 (subprogram_declaration)


State 90

   22 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 43
    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    type           go to state 107
    standard_type  go to state 48


State 91

   19 function_arguments: '(' parameter_list ')' .
   20 procedure_arguments: '(' parameter_list ')' .

    ';'       reduce using rule 20 (procedure_arguments)
    $default  reduce using rule 19 (function_arguments)


State 92

   23 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 7

    identifier_list  go to state 108


State 93

   15 subprogram_head: scoped_name function_arguments ':' standard_type . ';'

    ';'  shift, and go to state 109


State 94

    8 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 110


State 95

   40 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 40 (procedure_statement)


State 96

   42 expression_list: expression_list ',' . expression

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 111
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 97

   38 variable: ID '[' expression ']' .

    $default  reduce using rule 38 (variable)


State 98

   42 expression_list: expression_list . ',' expression
   51 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 112
    ','  shift, and go to state 96


State 99

   50 factor: ID '[' expression . ']'

    ']'  shift, and go to state 113


State 100

   55 factor: '(' expression ')' .

    $default  reduce using rule 55 (factor)


State 101

   30 statement: IF expression THEN statement .
   31          | IF expression THEN statement . ELSE statement ';'

    ELSE  shift, and go to state 114

    ELSE      [reduce using rule 30 (statement)]
    $default  reduce using rule 30 (statement)


State 102

   44 expression: simple_expression RELOP simple_expression .
   46 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 83

    $default  reduce using rule 44 (expression)


State 103

   46 simple_expression: simple_expression ADDOP term .
   48 term: term . MULOP factor

    MULOP  shift, and go to state 84

    $default  reduce using rule 46 (simple_expression)


State 104

   48 term: term MULOP factor .

    $default  reduce using rule 48 (term)


State 105

   29 statement_list: statement_list . ';' statement
   35 statement: WHILE expression DO statement_list .

    ';'  shift, and go to state 65

    ';'       [reduce using rule 35 (statement)]
    $default  reduce using rule 35 (statement)


State 106

   36 statement: FOR variable ASSIGNOP expression . TO expression DO statement_list

    TO  shift, and go to state 115


State 107

   22 parameter_list: identifier_list ':' type .

    $default  reduce using rule 22 (parameter_list)


State 108

    4 identifier_list: identifier_list . ',' ID
   23 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 10
    ':'  shift, and go to state 116


State 109

   15 subprogram_head: scoped_name function_arguments ':' standard_type ';' .

    $default  reduce using rule 15 (subprogram_head)


State 110

    8 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 117


State 111

   42 expression_list: expression_list ',' expression .

    $default  reduce using rule 42 (expression_list)


State 112

   51 factor: ID '(' expression_list ')' .

    $default  reduce using rule 51 (factor)


State 113

   50 factor: ID '[' expression ']' .

    $default  reduce using rule 50 (factor)


State 114

   31 statement: IF expression THEN statement ELSE . statement ';'

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement            go to state 118
    variable             go to state 35
    procedure_statement  go to state 36


State 115

   36 statement: FOR variable ASSIGNOP expression TO . expression DO statement_list

    INUM  shift, and go to state 51
    BOOL  shift, and go to state 52
    RNUM  shift, and go to state 53
    ID    shift, and go to state 54
    NOT   shift, and go to state 55
    '('   shift, and go to state 56

    expression         go to state 119
    simple_expression  go to state 58
    term               go to state 59
    factor             go to state 60


State 116

   23 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 43
    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    type           go to state 120
    standard_type  go to state 48


State 117

    8 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 121


State 118

   31 statement: IF expression THEN statement ELSE statement . ';'

    ';'  shift, and go to state 122


State 119

   36 statement: FOR variable ASSIGNOP expression TO expression . DO statement_list

    DO  shift, and go to state 123


State 120

   23 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 23 (parameter_list)


State 121

    8 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 124


State 122

   31 statement: IF expression THEN statement ELSE statement ';' .

    $default  reduce using rule 31 (statement)


State 123

   36 statement: FOR variable ASSIGNOP expression TO expression DO . statement_list

    ID      shift, and go to state 27
    BBEGIN  shift, and go to state 19
    IF      shift, and go to state 28
    WHILE   shift, and go to state 29
    FOR     shift, and go to state 30

    compound_statement   go to state 31
    statement_list       go to state 125
    statement            go to state 34
    variable             go to state 35
    procedure_statement  go to state 36


State 124

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 44
    REAL     shift, and go to state 45
    BOOLEAN  shift, and go to state 46

    standard_type  go to state 126


State 125

   29 statement_list: statement_list . ';' statement
   36 statement: FOR variable ASSIGNOP expression TO expression DO statement_list .

    ';'  shift, and go to state 65

    ';'       [reduce using rule 36 (statement)]
    $default  reduce using rule 36 (statement)


State 126

    8 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 8 (type)
