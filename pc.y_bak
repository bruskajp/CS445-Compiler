%{
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <assert.h>
#include <string.h>
#include "node.h"
#include "scope.h"
#include "tree.h"
#include "y.tab.h"

extern scope_t *top_scope;
extern node_t *tmp;
extern int procedure;

extern int yylex();
extern int yyerror(char *message);

%}

%union {
	/* scanner */
	int ival;
	float rval;
	char *sval;
	int opval;

	/* semantic + gencode */
	tree_t *tval;
}

%token <ival>	INUM
%token <ival> BOOL
%token <rval>	RNUM
%token <sval>	ID

%token	ASSIGNOP
%token <opval>	RELOP
%token <opval>	ADDOP
%token <opval>	MULOP
%token	NOT

%token	LT LE GT GE EQ NE
%token	OR PLUS MINUS
%token	AND STAR SLASH

%token	PROGRAM
%token	VAR
%token	ARRAY OF DOTDOT
%token	INTEGER REAL BOOLEAN
%token	FUNCTION PROCEDURE
%token	BBEGIN END
%token	IF THEN ELSE
%token	WHILE DO
%token	FOR TO

%token	FUNCTION_CALL
%token	ARRAY_ACCESS
%token	COMMA


%type <tval> identifier_list
%type <tval> standard_type
%type <tval> type
%type <tval> INTEGER
%type <tval> REAL
%type <tval> BOOLEAN
%type <tval> variable

%type <tval> expression_list
%type <tval> expression
%type <tval> simple_expression
%type <tval> term
%type <tval> factor


%%

program:
	{ top_scope = scope_push(top_scope); }
	PROGRAM ID '(' identifier_list ')' ';' 
	declarations
	subprogram_declarations
	compound_statement
	'.'
	{ top_scope = scope_pop(top_scope); }
	;



identifier_list
	: ID
		{	
			$$ = $1;
		}
	| identifier_list ',' ID
		{ 
			$$ = $3;
		}
	;

declarations
	: declarations VAR identifier_list ':' type ';'
		{
			if ((tmp = scope_search(top_scope, (char *) $3)) != NULL) {
				char* msg;
				asprintf(&msg, "\"%s\" is already declared", (char *) $3);
				semError(msg);
			}
			scope_insert(top_scope, (char *) $3, VAR, (uintptr_t) $5);
		}
	| /* empty */
	;

type
	: standard_type
		{ $$ = $1; }
	| ARRAY '[' INUM DOTDOT INUM ']' OF standard_type
		{ $$ = $8; }
	;

standard_type
	: INTEGER
		{ $$ = 258; }
	| BOOLEAN
		{ $$ = 259; }
	| REAL
		{ $$ = 260; }
	;

subprogram_declarations
	: subprogram_declarations subprogram_declaration ';'
	| /* empty */
	;

subprogram_declaration
	: subprogram_head declarations subprogram_declarations compound_statement
		{ top_scope = scope_pop(top_scope); }
	;

subprogram_head
	: FUNCTION ID function_arguments ':' standard_type ';'
		{
			procedure = 0;
			/* TODO: CHECK IF ACTUAL ARGUEMENT TYPES ARE THE SAME AS THE INPUT ARGUEMENT TYPES */
			if ((tmp = scope_search(top_scope, $2)) != NULL) { 
				char* msg;
				asprintf(&msg, "Name \"%s\" is already declared", $2);
				semError(msg);
			}
			scope_insert(top_scope, (char *) $2, FUNCTION, (uintptr_t) $5);
			top_scope = scope_push(top_scope); 
		}
	| PROCEDURE ID 
		{ 
			procedure = 1;
			/* TODO: CHECK IF ACTUAL ARGUEMENT TYPES ARE THE SAME AS THE INPUT ARGUEMENT TYPES */
			if ((tmp = scope_search(top_scope, $2)) != NULL) {
				char* msg;
				asprintf(&msg, "Name \"%s\" is already declared", $2);
				semError(msg);
			}
			scope_insert(top_scope, $2, PROCEDURE, -1); // Use -1 because proc does not have a ret type
			top_scope = scope_push(top_scope); 
		}
		procedure_arguments ';'
	;

function_arguments
	: '(' parameter_list ')'
	;

procedure_arguments
	: '(' parameter_list ')'
	| /* empty */
	;

parameter_list
	: identifier_list ':' type
		{
			if ((tmp = scope_search(top_scope, (char *) $1)) != NULL) { 
				char* msg;
				asprintf(&msg, "Name \"%s\" is already declared", (char *) $1);
				semError(msg);
			}
			scope_insert(top_scope, (char *) $1, VAR, (uintptr_t) $3);
		}
	| parameter_list ';' identifier_list ':' type
		{
			if ((tmp = scope_search(top_scope, (char *) $3)) != NULL) { 
				char* msg;
				asprintf(&msg, "Name \"%s\" is already declared", (char *) $3);
				semError(msg);
			}
			scope_insert(top_scope, (char *) $3, VAR, (uintptr_t) $5);
		}
	| /* empty */
	;


/* statement */

compound_statement
	: BBEGIN optional_statements END 
	;

optional_statements
	: statement_list
	| /* empty */
	;

statement_list
	: statement
		{
			// TODO: FIX
			//if ( 1 ){
			//	semError("Function missing return statement");	
			//}
		}
	| statement_list ';' statement
	;

statement
	: matched_statement
	| unmatched_statement
	;

matched_statement
	: IF expression THEN matched_statement ELSE matched_statement
		{
			if ( $2->effective_type != BOOL ){
				semError("Expression must evaluate to a boolean");
			}
			//print_tree($2,0); 
		}
	| variable ASSIGNOP expression
		{
			fprintf(stderr, "\n\nPRINTING TREE:\n");
			print_tree($3,0); 
			fprintf(stderr, "\n\n");
		}
	| procedure_statement
	| compound_statement
	| WHILE expression DO statement
		{
			if ( $2->effective_type != BOOL ){
				semError("Expression must evaluate to a boolean");
			}
			fprintf(stderr, "\n\nPRINTING TREE:\n");
			print_tree($2,0); 
			fprintf(stderr, "\n\n");
		}
	| FOR variable ASSIGNOP expression TO expression DO statement_list
		{
				if ( scope_search(top_scope, (char *) $2)->effective_type != INUM ){
					semError("Indexing variable must be an integer");
				}
				if ( $4->effective_type != INUM ){
					semError("Expression must use integers (1st value)");
				}
				if ( $6->effective_type != INUM ){
					semError("Expression must use integers (2nd value)");
				}
		} 
	;

unmatched_statement
	: IF expression THEN statement
	| IF expression THEN matched_statement ELSE unmatched_statement
	;

variable 
	: ID
		{
			if (procedure){
				if ((tmp = scope_search_all(top_scope, $1)) == NULL) {
					char* msg;
					asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
					semError(msg);
				} else {
					$$ = $1;
				}
			} else {
				if ((tmp = scope_search(top_scope, $1)) == NULL) {
					char* msg;
					asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
					semError(msg);
				} else {
					$$ = $1;
				}
			}
		}
	| ID '[' expression ']'
		{
			if (procedure){
				if ((tmp = scope_search_all(top_scope, $1)) == NULL) {
					char* msg;
					asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
					semError(msg);
				} else {
					if ( $3->effective_type != INUM ){
						semError("Non-integer type for array index");
					}
				}
			} else {
				if ((tmp = scope_search(top_scope, $1)) == NULL) {
					char* msg;
					asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
					semError(msg);
				} else {
					if ( $3->effective_type != INUM ){
						semError("Non-integer type for array index");
					}
				}
			}
			$$ = $1;
		}
	;

procedure_statement /* TODO: CHECK THAT THESE IDs NEED TO SEARCH SCOPE */
										/* TODO: CHECK THAT THESE ARE NOT USED BY FUNCTIONS */
	: ID
		{
			if ((tmp = scope_search(top_scope, $1)) == NULL) {
				char* msg;
				asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
				semError(msg);
			}
		}
	| ID '(' expression_list ')'
		{	
			if ( (strcmp($1, "read") == 0) && (scope_search(top_scope, $1) == NULL) ){
				scope_insert(top_scope, $1, PROCEDURE, -1); // no return type
			}
			if ( (strcmp($1, "write") == 0) && (scope_search(top_scope, $1) == NULL) ){
				scope_insert(top_scope, $1, PROCEDURE, -1); // no return type
			}
			if ( (tmp = scope_search(top_scope, $1)) == NULL ){
				char* msg;
				asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
				semError(msg);
			} 
		}
	;


/* expression */

expression_list
	: expression
		{ $$ = $1; }
	| expression_list ',' expression
		{ $$ = make_tree(COMMA, $1->effective_type, $1, $3); }
	;

expression
	: simple_expression
		{ $$ = $1; }
	| simple_expression RELOP simple_expression
		{ $$ = make_op(RELOP, $2, $1, $3); }
	;

simple_expression
	: term
		{ $$ = $1; }
	| simple_expression ADDOP term
		{ 
			$$ = make_op(ADDOP, $2, $1, $3); 
		}
	;

term
	: factor
		{ $$ = $1; }
	| term MULOP factor
		{ 
			$$ = make_op(MULOP, $2, $1, $3); 
		}
	;

factor
	: ID
		{ 
			if ((tmp = scope_search_all(top_scope, $1)) == NULL) {
				char* msg;
				asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
				semError(msg);
			}
			$$ = make_id(tmp); 
		}
	| ID '[' expression ']'
		{ 
			if ((tmp = scope_search_all(top_scope, $1)) == NULL) {
				char* msg;
				asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
				semError(msg);
			}
			$$ = make_tree(ARRAY_ACCESS, tmp->effective_type, make_id(tmp), $3); 
		}
	| ID '(' expression_list ')'
		{ 
			if ((tmp = scope_search_all(top_scope, $1)) == NULL) {
				char* msg;
				asprintf(&msg, "Name \"%s\" used but not defined\n", $1);
				semError(msg);
			}
			$$ = make_func(tmp);
			//$$ = make_tree(FUNCTION_CALL, tmp->effective_type, make_id(tmp), $3); 
		}
	| INUM
		{ $$ = make_inum($1); }
	| RNUM
		{ $$ = make_rnum($1); }
	| BOOL
		{ $$ = make_bool($1); }
	| '(' expression ')'
		{ $$ = $2; }
	| NOT factor /* TODO: HANDLE THIS CASE FOR "effective_type" */
		{ $$ = make_tree(NOT, $$->effective_type, NULL, NULL); }
	;


%%
	
scope_t *top_scope;
node_t *tmp;
int procedure;

int main()
{
	top_scope = NULL;
	tmp = NULL;

	yyparse();
}

int yyerror(char *message)
{
	fprintf(stderr, "\n\nSyntax Error: %s\n", message);
	exit(1);
}







